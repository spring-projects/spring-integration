<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.springframework.org/schema/integration/webflux"
			xmlns:xsd="http://www.w3.org/2001/XMLSchema"
			xmlns:tool="http://www.springframework.org/schema/tool"
			xmlns:integration="http://www.springframework.org/schema/integration"
			xmlns:int-http="http://www.springframework.org/schema/integration/http"
			targetNamespace="http://www.springframework.org/schema/integration/webflux" elementFormDefault="qualified">

	<xsd:import namespace="http://www.springframework.org/schema/beans"/>
	<xsd:import namespace="http://www.springframework.org/schema/tool"/>
	<xsd:import namespace="http://www.springframework.org/schema/integration"
				schemaLocation="https://www.springframework.org/schema/integration/spring-integration.xsd"/>
	<xsd:import namespace="http://www.springframework.org/schema/integration/http"
				schemaLocation="https://www.springframework.org/schema/integration/http/spring-integration-http.xsd"/>

	<xsd:annotation>
		<xsd:documentation><![CDATA[
	Defines the configuration elements for Spring Integration's WebFlux adapters.
		]]></xsd:documentation>
	</xsd:annotation>


	<xsd:element name="inbound-channel-adapter">
		<xsd:annotation>
			<xsd:documentation>
				Configures a Message Producing Endpoint for the
				'org.springframework.integration.webflux.inbound.WebFluxInboundEndpoint' that
				receives HTTP requests reactive manner and doesn't produce responses.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="request-mapping" type="int-http:requestMappingType" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation>
							Defines configuration for org.springframework.integration.http.inbound.RequestMapping
							as RESTFul attributes for Spring Integration HTTP Inbound Endpoints.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="cross-origin" type="int-http:crossOriginType" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation>
							Marks this endpoint as permitting cross origin requests (CORS).
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="header" type="int-http:headerType" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>
							Specifies a Message header as a result of expression evaluation
							against ServletRequest and URI Variables.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
			<xsd:attributeGroup ref="integration:channelAdapterAttributes"/>
			<xsd:attribute name="send-timeout" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						Maximum amount of time in milliseconds to wait when sending
						a message to the channel if such channel may block.
						For example, a Queue Channel can block until space
						is available if its maximum capacity has been reached.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="status-code-expression" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						A SpEL expression that resolves to an 'HttpStatus' code when rendering a response.
						The expression must return an object which can be converted to a
						'org.springframework.http.HttpStatus' enum value.
						The 'evaluationContext' has a 'BeanResolver' but no variables, so the usage of this attribute
						is somewhat limited.
						An example might be to resolve, at runtime, some scoped Bean that returns an
						'HttpStatus' value, or use a literal expression e.g. "201".
						By default 'status-code-expression' is null, meaning that the default '200 OK' response status
						will be returned.
						The 'http:inbound-gateway' resolves the 'status code' from the 'http_statusCode' header of the
						reply
						Message.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attributeGroup ref="inboundCommonAttributes"/>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="inbound-gateway">
		<xsd:annotation>
			<xsd:documentation>
				Configures a Messaging Gateway Endpoint for the
				'org.springframework.integration.webflux.inbound.WebFluxInboundEndpoint' that
				receives HTTP requests and produces responses reactive manner.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="int-http:gatewayType">
					<xsd:sequence>
						<xsd:element name="request-mapping" minOccurs="0">
							<xsd:annotation>
								<xsd:documentation>
									Defines configuration for
									org.springframework.integration.http.inbound.RequestMapping
									as RESTFul attributes for Spring Integration HTTP Inbound Endpoints.
								</xsd:documentation>
							</xsd:annotation>
							<xsd:complexType>
								<xsd:complexContent>
									<xsd:extension base="int-http:requestMappingType">
										<xsd:attribute name="produces" type="xsd:string">
											<xsd:annotation>
												<xsd:documentation>
													The producible media types of the mapped request, narrowing the
													primary mapping.
													The format is a sequence of media types ("text/plain",
													"application/*),
													with a request only mapped if the Accept matches one of these media
													types.
													Expressions can be negated by using the "!" operator, as in
													"!text/plain", which matches
													all requests with a Accept other than "text/plain".
												</xsd:documentation>
											</xsd:annotation>
										</xsd:attribute>
									</xsd:extension>
								</xsd:complexContent>
							</xsd:complexType>
						</xsd:element>
						<xsd:element name="cross-origin" type="int-http:crossOriginType" minOccurs="0">
							<xsd:annotation>
								<xsd:documentation>
									Marks this endpoint as permitting cross origin requests (CORS).
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="header" type="int-http:headerType" minOccurs="0" maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation>
									Specifies a Message header as a result of expression evaluation
									against ServletRequest and URI Variables.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
					<xsd:attribute name="request-channel" type="xsd:string" use="required">
						<xsd:annotation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="org.springframework.messaging.MessageChannel"/>
								</tool:annotation>
							</xsd:appinfo>
							<xsd:documentation>
								The receiving Message Channel of this endpoint.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attributeGroup ref="inboundCommonAttributes"/>
					<xsd:attribute name="extract-reply-payload" type="xsd:string" default="true">
						<xsd:annotation>
							<xsd:documentation>
								Specify whether only the reply Message's payload should be passed in the response.
								If this is set to 'false', the entire Message will be used to generate the response.
								The default is 'true'.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="mapped-response-headers" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
	Comma-separated list of names of MessageHeaders to be mapped into the HttpHeaders of the HTTP response.
	This can only be provided if the 'header-mapper' reference is not being set directly. The values in
	this list can also be simple patterns to be matched against the header names (e.g. "foo*" or "*foo").
	The String "HTTP_RESPONSE_HEADERS" will match against any of the standard HTTP Response headers.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="request-timeout" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
	Used to set the sendTimeout on the underlying MessagingTemplate instance
	(org.springframework.integration.core.MessagingTemplate) for sending messages
	to the request channel. If not specified this property will default to "1000"
	(1 second).
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="reply-timeout" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
	Used to set the receiveTimeout on the underlying MessagingTemplate instance
	(org.springframework.integration.core.MessagingTemplate) for receiving messages
	from the reply channel. If not specified this property will default to "1000"
	(1 second).
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="reply-timeout-status-code-expression" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
								A SpEL expression that resolves to an 'HttpStatus' code when rendering a response after
								a 'reply-timeout'.
								The expression must return an object which can be converted to a
								'org.springframework.http.HttpStatus' enum value.
								The 'evaluationContext' has a 'BeanResolver' but no variables, so the usage of this
								attribute
								is somewhat limited.
								An example might be to resolve, at runtime, some scoped Bean that returns an
								'HttpStatus' value, or use a literal expression e.g. "504".
								By default 'status-code-expression' is null, meaning that the default
								'500 Internal Server Error' response status will be returned after a timeout.
								When a timeout is not encountered,
								the 'http:inbound-gateway' resolves the 'status code' from the 'http_statusCode' header
								of the reply
								Message.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:attributeGroup name="inboundCommonAttributes">
		<xsd:attribute name="path" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					Comma-separated URI paths (e.g., /orderId/{order}).
					Ant-style path patterns are also supported (e.g. /myPath/*.do).
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="supported-methods">
			<xsd:annotation>
				<xsd:documentation>
					Comma-separated HTTP Method names. Determines which types of Request are
					allowed with this Endpoint.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:union memberTypes="int-http:httpMethodEnumeration xsd:string"/>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="request-payload-type" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					Target type for payload that is the conversion result of the request.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="payload-expression" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>
					Allows you to specify SpEL expression to construct a Message payload
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="header-mapper" type="xsd:string">
			<xsd:annotation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type type="org.springframework.integration.mapping.HeaderMapper"/>
					</tool:annotation>
				</xsd:appinfo>
				<xsd:documentation>
					Specifies a reference to org.springframework.integration.mapping.HeaderMapper
					implementation bean. Only one of 'header-mapper' or 'mapped-request-headers' attributes
					can be provided.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="mapped-request-headers" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation><![CDATA[
	Comma-separated list of names of HttpHeaders to be mapped from the HTTP request into the MessageHeaders.
	This can only be provided if the 'header-mapper' reference is not being set directly. The values in
	this list can also be simple patterns to be matched against the header names (e.g. "foo*" or "*foo").
	The String "HTTP_REQUEST_HEADERS" will match against any of the standard HTTP Request headers.
							]]></xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="error-channel" type="xsd:string">
			<xsd:annotation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type type="org.springframework.messaging.MessageChannel"/>
					</tool:annotation>
				</xsd:appinfo>
				<xsd:documentation>
					The MessagingGateway's 'error-channel' where to send an ErrorMessage in case
					of Exception is caused from original message flow.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="codec-configurer" type="xsd:string">
			<xsd:annotation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type type="org.springframework.http.codec.ServerCodecConfigurer"/>
					</tool:annotation>
				</xsd:appinfo>
				<xsd:documentation>
					A 'ServerCodecConfigurer' for the request readers and response writers.
					By default the 'ServerCodecConfigurer#create()' factory is used.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="requested-content-type-resolver" type="xsd:string">
			<xsd:annotation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type
								type="org.springframework.web.reactive.accept.RequestedContentTypeResolver"/>
					</tool:annotation>
				</xsd:appinfo>
				<xsd:documentation>
					A 'RequestedContentTypeResolver' strategy to resolve the requested media types
					for a 'ServerWebExchange'.
					A 'HeaderContentTypeResolver' is used by default.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="reactive-adapter-registry" type="xsd:string">
			<xsd:annotation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type type="org.springframework.core.ReactiveAdapterRegistry"/>
					</tool:annotation>
				</xsd:appinfo>
				<xsd:documentation>
					A 'ReactiveAdapterRegistry' registry of adapters to adapt a
					Reactive Streams 'Publisher' to/from.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="validator" type="xsd:string">
			<xsd:annotation>
				<xsd:appinfo>
					<tool:annotation kind="ref">
						<tool:expected-type type="org.springframework.validation.Validator"/>
					</tool:annotation>
				</xsd:appinfo>
				<xsd:documentation>
					A 'Validator' bean reference to validate a payload converted from the HTTP request.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>

	<xsd:element name="outbound-channel-adapter">
		<xsd:annotation>
			<xsd:documentation>
				Configures a Consumer Endpoint for the
				'org.springframework.integration.webflux.outbound.WebFluxRequestExecutingMessageHandler'
				with 'expectReply = false' that sends HTTP requests based on incoming messages reactive manner.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:choice minOccurs="0" maxOccurs="3">
				<xsd:element name="uri-variable" type="int-http:uriVariableType" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation>
							Specify an expression for URI variable placeholder within 'url'.
							This element is mutually exclusive with 'uri-variables-expression' attribute.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="request-handler-advice-chain" type="integration:handlerAdviceChainType"
							 minOccurs="0"/>
				<xsd:element ref="integration:poller" minOccurs="0" maxOccurs="1"/>
			</xsd:choice>
			<xsd:attributeGroup ref="integration:channelAdapterAttributes"/>
			<xsd:attributeGroup ref="int-http:httpOutboundCommonAttributes"/>
			<xsd:attribute name="web-client" type="xsd:string">
				<xsd:annotation>
					<xsd:appinfo>
						<tool:annotation kind="ref">
							<tool:expected-type type="org.springframework.web.reactive.function.client.WebClient"/>
						</tool:annotation>
					</xsd:appinfo>
					<xsd:documentation>
						A reference to an org.springframework.web.reactive.function.client.WebClient bean
						which is used to send to send the HTTP Requests reactive manner.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="extract-payload" type="xsd:string" default="true">
				<xsd:annotation>
					<xsd:documentation>
						Specify whether the outbound message's payload should be extracted
						when preparing the request body. Otherwise the Message instance itself
						will be serialized.
						The default value is 'true'.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="publisher-element-type" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						The type for a request 'Publisher' elements.
						This attribute cannot be provided if the expected-response-type-expression has a value
					</xsd:documentation>
					<xsd:appinfo>
						<tool:annotation>
							<tool:expected-type type="java.lang.Class"/>
						</tool:annotation>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="publisher-element-type-expression" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						SpEL expression to determine the type for a request 'Publisher' elements against a request
						message. The returned value of the expression could be an instance of java.lang.Class,
						or java.lang.String representing a fully qualified class name, or 'ParameterizedTypeReference'.
						This attribute cannot be provided if 'publisher-element-type' has a value
					</xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
			<xsd:attribute name="attribute-variables-expression" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation><![CDATA[
					Specifies the SpEL expression to be evaluated as a Map for request attributes.
					]]></xsd:documentation>
				</xsd:annotation>
			</xsd:attribute>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="outbound-gateway">
		<xsd:annotation>
			<xsd:documentation>
				Configures a Consumer Endpoint for the
				'org.springframework.integration.webflux.outbound.WebFluxRequestExecutingMessageHandler'
				that sends HTTP requests based on incoming messages and expects HTTP responses.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="int-http:gatewayType">
					<xsd:choice minOccurs="0" maxOccurs="3">
						<xsd:element name="uri-variable" type="int-http:uriVariableType" minOccurs="0"
									 maxOccurs="unbounded">
							<xsd:annotation>
								<xsd:documentation>
									Specify an expression for URI variable placeholder within 'url'.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element name="transactional" type="integration:transactionalType" minOccurs="0"/>
						<xsd:element name="request-handler-advice-chain" type="integration:handlerAdviceChainType"
									 minOccurs="0"/>
						<xsd:element ref="integration:poller" minOccurs="0"/>
					</xsd:choice>
					<xsd:attribute name="request-channel" type="xsd:string">
						<xsd:annotation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="org.springframework.messaging.MessageChannel"/>
								</tool:annotation>
							</xsd:appinfo>
							<xsd:documentation>
								The receiving Message Channel of this endpoint.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="mapped-response-headers" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
	Comma-separated list of names of HttpHeaders to be mapped from the HTTP response into the MessageHeaders.
	This can only be provided if the 'header-mapper' reference is not being set directly. The values in
	this list can also be simple patterns to be matched against the header names (e.g. "foo*" or "*foo").
	The String "HTTP_RESPONSE_HEADERS" will match against any of the standard HTTP Response headers.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="extract-request-payload" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
								Specifies whether the outbound message's payload should be extracted
								when preparing the request body. Otherwise the Message instance itself
								will be serialized.
								The default value is 'true'.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="transfer-cookies" default="false">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
	When set to "true", if a response contains a 'Set-Cookie' header, it will be mapped to a 'Cookie' header.
	This enables simple cookie handling where subsequent HTTP interactions in the same message flow can use a cookie
	supplied by the server. Default is "false".
							]]></xsd:documentation>
						</xsd:annotation>
						<xsd:simpleType>
							<xsd:union memberTypes="xsd:boolean xsd:string"/>
						</xsd:simpleType>
					</xsd:attribute>
					<xsd:attribute name="reply-timeout" type="xsd:string" default="30000">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
								Allows you to specify how long this gateway will wait for
								the reply message to be sent successfully to the reply channel
								before throwing an exception. This attribute only applies when the
								channel might block, for example when using a bounded queue channel that
								is currently full.

								Also, keep in mind that when sending to a DirectChannel, the
								invocation will occur in the sender's thread. Therefore,
								the failing of the send operation may be caused by other
								components further downstream.

								The "reply-timeout" attribute maps to the "sendTimeout" property of the
								underlying 'MessagingTemplate' instance (org.springframework.integration.core.MessagingTemplate).

								The value is specified in milliseconds.
							]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attributeGroup ref="int-http:httpOutboundCommonAttributes"/>
					<xsd:attribute name="web-client" type="xsd:string">
						<xsd:annotation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type
											type="org.springframework.web.reactive.function.client.WebClient"/>
								</tool:annotation>
							</xsd:appinfo>
							<xsd:documentation>
								A reference to an org.springframework.web.reactive.function.client.WebClient bean
								which is used to send to send the HTTP Requests reactive manner.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="reply-payload-to-flux" default="false">
						<xsd:annotation>
							<xsd:documentation>
								When set to "true", the response is converted to the Flux which is sent as a reply
								message payload.
								The downstream flow might have a splitter to walk through that Flux.
								Default is "false".
							</xsd:documentation>
						</xsd:annotation>
						<xsd:simpleType>
							<xsd:union memberTypes="xsd:boolean xsd:string"/>
						</xsd:simpleType>
					</xsd:attribute>
					<xsd:attribute name="body-extractor" type="xsd:string">
						<xsd:annotation>
							<xsd:appinfo>
								<tool:annotation kind="ref">
									<tool:expected-type type="org.springframework.web.reactive.function.BodyExtractor"/>
								</tool:annotation>
							</xsd:appinfo>
							<xsd:documentation>
								A reference to an org.springframework.web.reactive.function.BodyExtractor bean
								which is used to to extract the content from the response.
								Must be used instead of 'expected-response-type(-expression)'
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="publisher-element-type" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
								The type for a request 'Publisher' elements.
								This attribute cannot be provided if the expected-response-type-expression has a value
							</xsd:documentation>
							<xsd:appinfo>
								<tool:annotation>
									<tool:expected-type type="java.lang.Class"/>
								</tool:annotation>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="publisher-element-type-expression" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
								SpEL expression to determine the type for a request 'Publisher' elements against a
								request
								message. The returned value of the expression could be an instance of java.lang.Class,
								or java.lang.String representing a fully qualified class name, or
								'ParameterizedTypeReference'.
								This attribute cannot be provided if 'publisher-element-type' has a value
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="extract-response-body" default="true">
						<xsd:annotation>
							<xsd:documentation>
								Set to 'false' to return the whole 'ResponseEntity' in the reply message payload.
								The default value is 'true'.
							</xsd:documentation>
						</xsd:annotation>
						<xsd:simpleType>
							<xsd:union memberTypes="xsd:boolean xsd:string"/>
						</xsd:simpleType>
					</xsd:attribute>
					<xsd:attribute name="attribute-variables-expression" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation><![CDATA[
					Specifies the SpEL expression to be evaluated as a Map for request attributes.
					]]></xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

</xsd:schema>
